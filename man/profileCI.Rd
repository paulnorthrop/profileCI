% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/profileCI.R
\name{profileCI}
\alias{profileCI}
\title{Confidence Intervals using Profile Likelihood}
\usage{
profileCI(
  object,
  loglik,
  ...,
  parm = "all",
  level = 0.95,
  profile = TRUE,
  mult = 2,
  faster = FALSE,
  epsilon = -1,
  optim_args = list()
)
}
\arguments{
\item{object}{A fitted model object. This object must have a \code{coef} S3
method. If \code{faster = TRUE} then it must also have a \code{vcov} S3 method.}

\item{loglik}{A named function that returns the log-likelihood based on
input parameter values and data. The first argument must be the vector of
model parameters. If the likelihood is zero for any observation in the
data then the function should return \code{-Inf.}}

\item{...}{Further arguments to be passed to \code{loglik}.}

\item{parm}{A vector specifying the parameters for which confidence
intervals are calculated, either a vector of numbers or a vector of names.
The default, \code{which = "all"}, produces confidence intervals for all the
parameters.}

\item{level}{The confidence level required.  A numeric scalar in (0, 1).}

\item{profile}{A logical scalar. If \code{TRUE} then confidence intervals
based on a profile log-likelihood are returned.  If \code{FALSE} then intervals
based on approximate large sample normal theory, which are symmetric about
the MLE, are returned.}

\item{mult}{A positive numeric scalar. Controls the increment by which the
parameter of interest is increased/decreased when profiling above/below
its MLE. The increment is \code{mult * se / 100} where \code{se} is the estimated
standard error of the estimator of the parameter. Decreasing \code{mult}
profiles at more points but will be slower.}

\item{faster}{A logical scalar. If \code{faster = TRUE} then the profiling of the
log-likelihood is in search of a lower (upper) confidence limit is
started at the corresponding symmetric lower (upper) confidence limit.}

\item{epsilon}{Only relevant if \code{profile = TRUE}. A numeric vector of values
that determine the accuracy of the confidence limits. \code{epsilon} is
recycled to the length of the parameter vector \code{parm}.
\itemize{
\item If \code{epsilon[i] > 0} then this value is passed as the argument \code{epsilon}
to the \code{\link[itp:itp]{itp::itp}} function, which estimates the parameter values for
which the profile log-likelihood for parameter \code{i} drops to the value
that defines the confidence limits, once profiling has been successful
in finding an interval within which this value lies.
\item If \code{epsilon[i] < 0} quadratic interpolation is used, which will tend to
be faster.
\item If \code{epsilon[i] = 0} then linear interpolation is used, which will be
faster still.
}}

\item{optim_args}{A list of further arguments (other than \code{par} and \code{fn}) to
pass to \verb{[stats::optim]}.}
}
\description{
Calculates confidence intervals for one or more parameters for a fitted
model object. A function that returns the log-likelihood must also be
supplied.
Also check \code{chandwich::adjust_loglik} for \code{alg_deriv} and \code{alg_hess}.
Allow \code{loglik} as an attribute to object.
If only \code{loglik} provided then find MLEs etc
Use lower and upper, if present, to contrain symmetric intervals
Optional function to calculate initial estimates, conditional on 1 parameter
}
\details{
The default, \code{epsilon = -1}, should work well enough in most
circumstances, but to achieve a specific accuracy set \code{epsilon} to be
a small positive value, for example, \code{epsilon = 1e-4}.
}
\examples{
## From example(glm)
counts <- c(18,17,15,20,10,20,25,13,12)
outcome <- gl(3, 1, 9); treatment <- gl(3, 3)
glm.D93 <- glm(counts ~ outcome + treatment, family = poisson())
confint(glm.D93)
confint.default(glm.D93)

poisson_loglik <- function(par) {
  lambda <- exp(model.matrix(glm.D93) \%*\% par)
  loglik <- stats::dpois(x = counts, lambda = lambda, log = TRUE)
  return(sum(loglik))
}
# Will be slower than profile.glm() because glm.fit() is fast
x <- profileCI(glm.D93, loglik = poisson_loglik, mult = 32)
x
plot(x, parm = 1)
plot(x, parm = "outcome2")

# Can I speed things up by starting at the symmetric limits?
# Do I need to estimate other parameters conditional on the parameter of interest?
# Base this on the vcov matrix

# To do
# 3. Initial estimates for faster = TRUE
#    Also for quadratic interpolation?
#    Option for a user-supplied function
# 5. Perhaps rename faster to jump?

x <- profileCI(glm.D93, loglik = poisson_loglik, mult = 32, faster = TRUE)
x
}
