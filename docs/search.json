[{"path":"https://github.com/paulnorthrop/profileCI/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Paul J. Northrop. Author, maintainer, copyright holder.","code":""},{"path":"https://github.com/paulnorthrop/profileCI/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Northrop PJ (2025). profileCI: Profiling Log-Likelihood Calculate Confidence Interval. R package version 1.0.0, https://github.com/paulnorthrop/profileCI, https://paulnorthrop.github.io/profileCI/.","code":"@Manual{,   title = {profileCI: Profiling a Log-Likelihood to Calculate a Confidence Interval},   author = {Paul J. Northrop},   year = {2025},   note = {R package version 1.0.0, https://github.com/paulnorthrop/profileCI},   url = {https://paulnorthrop.github.io/profileCI/}, }"},{"path":"https://github.com/paulnorthrop/profileCI/index.html","id":"profiling-a-log-likelihood-to-calculate-a-confidence-interval","dir":"","previous_headings":"","what":"Profiling a log-likelihood to calculate a confidence interval","title":"Profiling a Log-Likelihood to Calculate a Confidence Interval","text":"package computes confidence intervals based profile log-likelihood one parameters user-supplied fitted multi-parameter model. functionality main function, profileCI(), like confint.glm, calculates confidence intervals parameters Generalised Linear Model (GLM). Speed computation can improved starting profiling limits based large sample normal theory. accuracy limits can set user. plot method visualises log-likelihood confidence interval. convex log-likelihoods supported, , disjoint confidence intervals found.","code":""},{"path":"https://github.com/paulnorthrop/profileCI/index.html","id":"an-example","dir":"","previous_headings":"","what":"An example","title":"Profiling a Log-Likelihood to Calculate a Confidence Interval","text":"illustrate use profileCI() using example help file stats::glm(). calculate intervals using profileCI provide function calculates log-likelihood Poisson GLM input parameter vector pars. function profileCI() profiles log-likelihood, respect one parameter time. given value parameter log-likelihood maximised parameters. aim search MLE parameter profile log-likelihood drops level corresponding limits confidence interval desired confidence level. Two arguments can used affect speed confidence limits obtained: mult determines amount, percentage estimated standard error estimator parameter interest, value parameter incremented profiling. Larger values mult result faster calculation increase risk one optimisations required fail. argument faster = TRUE searches lower upper confidence limits started limits based approximate large sample normal distribution maximum likelihood estimator parameter, rather maximum likelihood estimate. defaults mult = 32 faster = TRUE. can visualise profile likelihood parameter using plot method.  obtain smooth version plot, call profileCI() mult = 8 faster = FALSE, much slower calculation.  default, determined limit lies two values parameter, quadratic interpolation used estimate value limit. specific degree accuracy required can set passing positive tolerance epsilon itp function itp package. alternative passing log-likelihood function using argument loglik provide function via logLikFn S3 method fitted model object.","code":"## From example(glm) counts <- c(18, 17, 15, 20, 10, 20, 25, 13, 12) outcome <- gl(3, 1, 9) treatment <- gl(3, 3) glm.D93 <- glm(counts ~ outcome + treatment, family = poisson()) # Intervals based on profile log-likelihood confint(glm.D93) #> Waiting for profiling to be done... #>                  2.5 %      97.5 % #> (Intercept)  2.6958215  3.36655581 #> outcome2    -0.8577018 -0.06255840 #> outcome3    -0.6753696  0.08244089 #> treatment2  -0.3932548  0.39325483 #> treatment3  -0.3932548  0.39325483 poisson_loglik <- function(pars) {   lambda <- exp(model.matrix(glm.D93) %*% pars)   loglik <- stats::dpois(x = glm.D93$y, lambda = lambda, log = TRUE)   return(sum(loglik)) } library(profileCI) prof <- profileCI(glm.D93, loglik = poisson_loglik) prof #>                   2.5%       97.5% #> (Intercept)  2.6958271  3.36656670 #> outcome2    -0.8576884 -0.06255488 #> outcome3    -0.6753594  0.08244084 #> treatment2  -0.3932489  0.39324886 #> treatment3  -0.3932489  0.39324886 plot(prof, parm = \"outcome2\") prof <- profileCI(glm.D93, loglik = poisson_loglik, mult = 8, faster = FALSE) plot(prof, parm = \"outcome2\")"},{"path":"https://github.com/paulnorthrop/profileCI/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Profiling a Log-Likelihood to Calculate a Confidence Interval","text":"get current released version CRAN:","code":"install.packages(\"profileCI\")"},{"path":"https://github.com/paulnorthrop/profileCI/reference/logLikFn.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Log-Likelihood — logLikFn","title":"Calculate Log-Likelihood — logLikFn","text":"generic function calculating log-likelihood object input parameter values.","code":""},{"path":"https://github.com/paulnorthrop/profileCI/reference/logLikFn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Log-Likelihood — logLikFn","text":"","code":"logLikFn(object, pars, ...)  # S3 method for class 'glm' logLikFn(object, pars, ...)"},{"path":"https://github.com/paulnorthrop/profileCI/reference/logLikFn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Log-Likelihood — logLikFn","text":"object fitted model object. pars numeric vector parameters model. ... arguments.","code":""},{"path":"https://github.com/paulnorthrop/profileCI/reference/logLikFn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Log-Likelihood — logLikFn","text":"numeric scalar. value log-likelihood function fitted model object object parameter values pars.","code":""},{"path":"https://github.com/paulnorthrop/profileCI/reference/logLikFn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Log-Likelihood — logLikFn","text":"generic function created enable function calculates log-likelihood parametric model given set parameter values pars available function profileCI.","code":""},{"path":"https://github.com/paulnorthrop/profileCI/reference/profileCI-internal.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal profileCI functions — profileCI-internal","title":"Internal profileCI functions — profileCI-internal","text":"Internal profileCI functions","code":""},{"path":"https://github.com/paulnorthrop/profileCI/reference/profileCI-internal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal profileCI functions — profileCI-internal","text":"","code":"profile_ci(object, negated_loglik_fn, which = 1, level, mle, inc, epsilon, ...)  faster_profile_ci(   object,   negated_loglik_fn,   which = 1,   which_name,   level,   mle,   ci_sym_mat,   inc,   epsilon,   ... )  lagrangianInterpolation(x0, y0)  initial_mvn(object, x, x_value)"},{"path":"https://github.com/paulnorthrop/profileCI/reference/profileCI-internal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Internal profileCI functions — profileCI-internal","text":"functions intended called user.","code":""},{"path":"https://github.com/paulnorthrop/profileCI/reference/profileCI-package.html","id":null,"dir":"Reference","previous_headings":"","what":"profileCI: Profiling a Log-Likelihood to Calculate a Confidence Interval — profileCI-package","title":"profileCI: Profiling a Log-Likelihood to Calculate a Confidence Interval — profileCI-package","text":"Provides tools profiling user-supplied log-likelihood function calculate confidence intervals model parameters. Speed computation can improved adjusting step sizes profiling /starting profiling limits based approximate large sample normal distribution maximum likelihood estimator parameter. accuracy limits can set user. plot method visualises log-likelihood confidence interval. convex log-likelihoods supported, , disjoint confidence intervals found.","code":""},{"path":"https://github.com/paulnorthrop/profileCI/reference/profileCI-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"profileCI: Profiling a Log-Likelihood to Calculate a Confidence Interval — profileCI-package","text":"main function profileCI, profiles log-likelihood, respect one parameter time.","code":""},{"path":[]},{"path":"https://github.com/paulnorthrop/profileCI/reference/profileCI-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"profileCI: Profiling a Log-Likelihood to Calculate a Confidence Interval — profileCI-package","text":"Maintainer: Paul J. Northrop p.northrop@ucl.ac.uk [copyright holder]","code":""},{"path":"https://github.com/paulnorthrop/profileCI/reference/profileCI.html","id":null,"dir":"Reference","previous_headings":"","what":"Confidence Intervals using Profile Likelihood — profileCI","title":"Confidence Intervals using Profile Likelihood — profileCI","text":"Calculates confidence intervals one parameters fitted model object. function returns log-likelihood must supplied, either directly via argument loglik using logLikFn S3 generic.","code":""},{"path":"https://github.com/paulnorthrop/profileCI/reference/profileCI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confidence Intervals using Profile Likelihood — profileCI","text":"","code":"profileCI(   object,   loglik,   ...,   parm = \"all\",   level = 0.95,   profile = TRUE,   mult = 32,   faster = TRUE,   epsilon = -1,   optim_args = list() )"},{"path":"https://github.com/paulnorthrop/profileCI/reference/profileCI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confidence Intervals using Profile Likelihood — profileCI","text":"object fitted model object. object must coef S3 method. faster = TRUE must also vcov S3 method. loglik named function returns log-likelihood based input parameter values data. first argument must vector model parameters. likelihood zero observation data function return -Inf. Alternatively, loglik need supplied logLikFn S3 method created object. profileCI package provides logLikFn.glm, used example Examples. ... arguments passed loglik. parm vector specifying parameters confidence intervals calculated, either vector numbers vector names. default, = \"\", produces confidence intervals parameters. level confidence level required.  numeric scalar (0, 1). profile logical scalar. TRUE confidence intervals based profile log-likelihood returned.  FALSE intervals based approximate large sample normal theory, symmetric MLE, returned. mult positive numeric scalar. Controls increment parameter interest increased/decreased profiling /MLE. increment mult * se / 100 se estimated standard error estimator parameter. Decreasing mult profiles points slower. faster logical scalar. faster = TRUE profiling log-likelihood search lower (upper) confidence limit started corresponding symmetric lower (upper) confidence limit. epsilon relevant profile = TRUE. numeric vector values determine accuracy confidence limits. epsilon recycled length parameter vector parm. epsilon[] > 0 value passed argument epsilon itp::itp function, estimates parameter values profile log-likelihood parameter drops value defines confidence limits, profiling successful finding interval within value lies. epsilon[] < 0 quadratic interpolation used, tend faster. epsilon[] = 0 linear interpolation used, faster still. optim_args list arguments (par fn) pass [stats::optim].","code":""},{"path":"https://github.com/paulnorthrop/profileCI/reference/profileCI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Confidence Intervals using Profile Likelihood — profileCI","text":"object class c(\"profileCI\", \"matrix\", \"array\"). numeric matrix 2 columns giving lower upper confidence limits parameter. columns labelled (1-level)/2 1-(1-level)/2, expressed percentage, default 2.5% 97.5%. row names names parameters supplied parm. profile = TRUE returned object extra attributes crit, level for_plot. latter named list length equal number parameters. component 2-column numeric matrix. first column contains values parameter second column corresponding values profile log-likelihood. profile log-likelihood equal attribute crit limits confidence interval. attribute level input argument level. faster = FALSE epsilon > 0 attributes lower_pars upper_pars lists provide, profiling, values parameters last maximisation log-likelihood. matrix columns giving  object `c(\"profileCI\", \"matrix\", \"array\")“","code":""},{"path":"https://github.com/paulnorthrop/profileCI/reference/profileCI.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Confidence Intervals using Profile Likelihood — profileCI","text":"default, epsilon = -1, work well enough circumstances, achieve specific accuracy set epsilon small positive value, example, epsilon = 1e-4. defaults mult  = 32 faster = TRUE designed calculate confidence intervals fairly quickly. object returned profileCI plotted, using plot.profileCI, obtain smooth plot profile log-likelihood. Setting faster = FALSE reducing mult, perhaps 8 16 produce smoother plot.","code":""},{"path":[]},{"path":"https://github.com/paulnorthrop/profileCI/reference/profileCI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Confidence Intervals using Profile Likelihood — profileCI","text":"","code":"## From example(glm) counts <- c(18, 17, 15, 20, 10, 20, 25, 13, 12) outcome <- gl(3, 1, 9) treatment <- gl(3, 3) glm.D93 <- glm(counts ~ outcome + treatment, family = poisson()) confint(glm.D93) #> Waiting for profiling to be done... #>                  2.5 %      97.5 % #> (Intercept)  2.6958215  3.36655581 #> outcome2    -0.8577018 -0.06255840 #> outcome3    -0.6753696  0.08244089 #> treatment2  -0.3932548  0.39325483 #> treatment3  -0.3932548  0.39325483 confint.default(glm.D93) #>                  2.5 %      97.5 % #> (Intercept)  2.7095672  3.37947764 #> outcome2    -0.8505027 -0.05800787 #> outcome3    -0.6707552  0.08478093 #> treatment2  -0.3919928  0.39199279 #> treatment3  -0.3919928  0.39199279  poisson_loglik <- function(pars) {   lambda <- exp(model.matrix(glm.D93) %*% pars)   loglik <- stats::dpois(x = glm.D93$y, lambda = lambda, log = TRUE)   return(sum(loglik)) }  # This will be a bit slower than profile.glm() because glm.fit() is fast prof <- profileCI(glm.D93, loglik = poisson_loglik) prof #>                   2.5%       97.5% #> (Intercept)  2.6958271  3.36656670 #> outcome2    -0.8576884 -0.06255488 #> outcome3    -0.6753594  0.08244084 #> treatment2  -0.3932489  0.39324886 #> treatment3  -0.3932489  0.39324886 plot(x, parm = 1) #> Error: object 'x' not found plot(x, parm = \"outcome2\") #> Error: object 'x' not found  # A logLikFn.glm S3 method is provided in profileCI so we do not need to # supply loglik explicitly prof <- profileCI(glm.D93) prof #>                   2.5%       97.5% #> (Intercept)  2.6958271  3.36656670 #> outcome2    -0.8576884 -0.06255488 #> outcome3    -0.6753594  0.08244084 #> treatment2  -0.3932489  0.39324886 #> treatment3  -0.3932489  0.39324886"},{"path":"https://github.com/paulnorthrop/profileCI/reference/profileCI_methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods for objects of class ","title":"Methods for objects of class ","text":"Methods objects class \"profileCI\" returned profileCI.","code":""},{"path":"https://github.com/paulnorthrop/profileCI/reference/profileCI_methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for objects of class ","text":"","code":"# S3 method for class 'profileCI' print(x, ...)  # S3 method for class 'profileCI' plot(x, parm = 1:nrow(x), add = TRUE, digits = 2, ...)"},{"path":"https://github.com/paulnorthrop/profileCI/reference/profileCI_methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods for objects of class ","text":"x object inheriting class profileCI\", result call profileCI. ... arguments. print.\"profileCI\" pass arguments print. plot.profileCI pass graphical parameters graphics::plot create initial plot profile log-likelihood. parm numeric character scalar specifying parameter profile log-likelihood plotted. Must single component consistent argument parm profileCI. add logical scalar. add = TRUE plot annotated horizontal line indicating critical value profile log-likelihood used calculate confidence limits, vertical lines indicating values limits legend stating confidence interval. digits integer. Passed signif round confidence limits legend, add = TRUE.","code":""},{"path":"https://github.com/paulnorthrop/profileCI/reference/profileCI_methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Methods for objects of class ","text":"print.profileCI: argument x returned, invisibly. plot.profileCI: numeric vector containing confidence interval parameter chosen plot.","code":""},{"path":"https://github.com/paulnorthrop/profileCI/reference/profileCI_methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Methods for objects of class ","text":"print.profileCI. numeric matrix 2 columns giving lower upper confidence limits parameters specified argument parm profileCI. columns labelled (1-level)/2 1-(1-level)/2, expressed percentage, default 2.5% 97.5%. plot.profileCI. plot produced profile log-likelihood parameter chosen parm. parameter values used profile log-likelihood call profileCI included, faster = TRUE used plot smooth curve triangular middle.","code":""},{"path":"https://github.com/paulnorthrop/profileCI/reference/profileCI_methods.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Methods for objects of class ","text":"See profileCI.","code":""},{"path":[]}]
